#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:nil
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:900
#+OPTIONS: toc:nil <:nil timestamp:nil email:t reveal_slide_number:"c/t"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ../reveal.js/

# (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# (setq org-reveal-title-slide 'auto)
# see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

#+TITLE: An Alternative to Virtual Functions
#+AUTHOR: Ben Deane
#+EMAIL: bdeane@blizzard.com
#+DATE: A Lightning Talk for CppCon 2016

* Expression SFINAE
(A simple application)

** The Basic Idea
 - The interface is a class template.
 - The implementation is the template argument that supplies the functionality.
 - The implementation supplies the basis set of functions.
 - The interface may offer a richer API for the sake of expressivity.
 - The implementation may supply the richer functions for the sake of performance.

** Example: autocompletion
#+BEGIN_SRC cpp
  template <typename Engine>
  struct Completer {
    Engine e;

    // basis functions
    void AddWord(const string& s);

    vector<string> GetCandidates(const string& prefix);

    // optional functions
    template <typename It>
    void AddWords(It first, It last);

    string Complete(const string& prefix);
  };
#+END_SRC
The optional functions may be implemented in terms of the basis functions.

** Expression SFINAE
We will detect the implementation's capability with expression SFINAE.
#+BEGIN_SRC cpp
  #define SFINAE_DETECT(name, expr)                                   \
    template <typename T>                                             \
    using name##_t = decltype(expr);                                  \
    template <typename T, typename = void>                            \
    struct has_##name : public std::false_type {};                    \
    template <typename T>                                             \
  struct has_##name<T, void_t<name##_t<T>>> : public std::true_type {};

  // detect Complete(string)
  SFINAE_DETECT(complete,
                declval<T>().Complete(std::string()))

  // detect AddWords(It, It)
  SFINAE_DETECT(add_words,
                declval<T>().AddWords(0, 0))
#+END_SRC


** Call the function, if provided
Interface overloads on whether the implementation has a function, and if not,
provides a fallback.
#+BEGIN_SRC cpp
  string Complete(const string& prefix)
  {
    return Complete(prefix, has_complete<Engine>{});
  }

  string Complete(const string& prefix, std::true_type)
  {
    return e.Complete(prefix);
  }

  string Complete(const string& prefix, std::false_type)
  {
    // fallback implementation in terms of GetCandidates
    ...
  }
#+END_SRC

** That's it
 - The interface may add functions to be arbitrarily expressive.
 - The implementation may implement arbitrary functions from the extended set
   for performance reasons.
 - There are no virtual functions or vtables: everything is decided and
   optimized at compile time.

Full example code: https://github.com/elbeno/autocomplete
